{
	"info": {
		"_postman_id": "baf964e4-0669-466a-8bb3-5491f80d3461",
		"name": "Social Network Kata API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5960350"
	},
	"item": [
		{
			"name": "Timeline",
			"item": [
				{
					"name": "Post Message - Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response content type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response schema contains required properties\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'content', 'author', 'timestamp', 'mentions', 'links');",
									"",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.content).to.be.a('string');",
									"    pm.expect(responseData.timestamp).to.be.a('string');",
									"",
									"    pm.expect(responseData.mentions).to.be.an('array');",
									"    pm.expect(responseData.links).to.be.an('array');",
									"",
									"    responseData.mentions.forEach(function(mention) {",
									"        pm.expect(mention).to.be.a('string');",
									"    });",
									"",
									"    responseData.links.forEach(function(link) {",
									"        pm.expect(link).to.be.a('string');",
									"    });",
									"",
									"    pm.expect(responseData.author).to.be.an('object');",
									"    pm.expect(responseData.author).to.have.all.keys('id', 'username');",
									"    pm.expect(responseData.author.id).to.be.a('number');",
									"    pm.expect(responseData.author.username).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Author username is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('author').that.is.an('object');",
									"    pm.expect(responseData.author).to.have.property('username').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Author username should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hello World! This is my first message. Check out @bob and this link https://google.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/timeline/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"timeline",
								"alice"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Post Message - Bob",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hello @alice! Please check this link https://facebook.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/timeline/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"timeline",
								"bob"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Post Message (Bad Request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('timestamp', 'status', 'error', 'message', 'path');",
									"});",
									"",
									"",
									"pm.test(\"Status is of type integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('status').that.is.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"    \"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/timeline/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"timeline",
								"alice"
							]
						},
						"description": "Tenta criar uma mensagem com conteúdo vazio, esperando um erro 400 Bad Request."
					},
					"response": []
				},
				{
					"name": "Get Timeline - Alice",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/timeline/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"timeline",
								"alice"
							]
						},
						"description": "Busca a timeline do usuário 'alice'."
					},
					"response": []
				},
				{
					"name": "Get Timeline - Bob",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/timeline/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"timeline",
								"bob"
							]
						},
						"description": "Busca a timeline do usuário 'alice'."
					},
					"response": []
				},
				{
					"name": "Get Timeline (User Not Found)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/timeline/non_existent_user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"timeline",
								"non_existent_user"
							]
						},
						"description": "Tenta buscar a timeline de um usuário que não existe, esperando um erro 404 Not Found."
					},
					"response": []
				}
			]
		},
		{
			"name": "Wall",
			"item": [
				{
					"name": "Get Wall - Alice",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/wall/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wall",
								"alice"
							]
						},
						"description": "Busca o wall do usuário 'charlie'. (Nota: a lógica de seguir outros usuários precisa ser implementada para que este endpoint retorne mais do que a própria timeline)."
					},
					"response": []
				},
				{
					"name": "Get Wall - Bob",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/wall/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wall",
								"bob"
							]
						},
						"description": "Busca o wall do usuário 'charlie'. (Nota: a lógica de seguir outros usuários precisa ser implementada para que este endpoint retorne mais do que a própria timeline)."
					},
					"response": []
				},
				{
					"name": "Get Wall - Charlie",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/wall/charlie",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wall",
								"charlie"
							]
						},
						"description": "Busca o wall do usuário 'charlie'. (Nota: a lógica de seguir outros usuários precisa ser implementada para que este endpoint retorne mais do que a própria timeline)."
					},
					"response": []
				},
				{
					"name": "Get Wall (User Not Found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('timestamp', 'status', 'error', 'message', 'path');",
									"});",
									"",
									"",
									"pm.test(\"Response should indicate not found error\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('status').that.equals(404);",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string indicating the error reason\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/wall/non_existent_user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wall",
								"non_existent_user"
							]
						},
						"description": "Tenta buscar o wall de um usuário que não existe, esperando um erro 404 Not Found."
					},
					"response": []
				}
			]
		},
		{
			"name": "Mentions",
			"item": [
				{
					"name": "Get Mentions Alice",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/mentions/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mentions",
								"alice"
							]
						},
						"description": "Busca todas as mensagens que mencionam o usuário 'bob'."
					},
					"response": []
				},
				{
					"name": "Get Mentions Bob",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/mentions/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mentions",
								"bob"
							]
						},
						"description": "Busca todas as mensagens que mencionam o usuário 'bob'."
					},
					"response": []
				}
			]
		},
		{
			"name": "Following",
			"item": [
				{
					"name": "Charlie Follow Alice",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/follow/charlie/to/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"follow",
								"charlie",
								"to",
								"alice"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Charlie Follow Bob",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/follow/charlie/to/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"follow",
								"charlie",
								"to",
								"bob"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Alice Follow Charlie",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/follow/alice/to/charlie",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"follow",
								"alice",
								"to",
								"charlie"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Alice Follow Bob",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/follow/alice/to/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"follow",
								"alice",
								"to",
								"bob"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				}
			]
		},
		{
			"name": "Direct Message",
			"item": [
				{
					"name": "Alice sends to Bob",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hello Bob! How are U?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dm/alice/to/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dm",
								"alice",
								"to",
								"bob"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Alice sends to Charlie",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hi Charlie! What U doing now?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dm/alice/to/charlie",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dm",
								"alice",
								"to",
								"charlie"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Bob sends to Alice",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Hi Alice! I'm fine, tks!!!\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/dm/bob/to/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dm",
								"bob",
								"to",
								"alice"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				},
				{
					"name": "Get inbox Alice",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dm/alice",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dm",
								"alice"
							]
						},
						"description": "Busca todas as mensagens que mencionam o usuário 'bob'."
					},
					"response": []
				},
				{
					"name": "Get inbox Bob",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dm/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dm",
								"bob"
							]
						},
						"description": "Busca todas as mensagens que mencionam o usuário 'bob'."
					},
					"response": []
				},
				{
					"name": "Get inbox Charlie",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dm/charlie",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dm",
								"charlie"
							]
						},
						"description": "Busca todas as mensagens que mencionam o usuário 'bob'."
					},
					"response": []
				},
				{
					"name": "Get conversation Alice Bob",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/dm/between/alice/bob",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dm",
								"between",
								"alice",
								"bob"
							]
						},
						"description": "Busca todas as mensagens que mencionam o usuário 'bob'."
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create user Alice",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"alice\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Cria uma nova mensagem para o usuário 'alice'. Se 'alice' não existir, ela será criada."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080/api/v1",
			"type": "string"
		}
	]
}